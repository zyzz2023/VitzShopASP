@using VitzShop.Services
@using VitzShop.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore; 

@attribute [Authorize(Roles = "Admin")]
@inject UserService UserService
@inject NavigationManager Navigation
@page "/admin/users"
@rendermode InteractiveServer

<h2>Управление администраторами/менеджерами</h2>

<button class="btn btn-primary mb-3" @onclick="AddUser">Добавить администратора</button>

<table class="table">
    <thead>
        <tr>
            <th>Роль</th>
            <th>Почта</th>
            <th>Подтверждена ли почта</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Users)
        {
            <tr>
                <td>
                    @if (UserRoles.ContainsKey(user.Id))
                    {
                        foreach (var role in UserRoles[user.Id])
                        {
                            <span>@role </span>
                        }
                    }
                    else
                    {
                        <span>Нет ролей</span>
                    }
                </td>
                <td>@user.Email</td>
                <td>@user.EmailConfirmed</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => EditUser(user.Id)">Редактировать</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteUserAsync(user)">Удалить</button>
                </td>
            </tr>
        }

    </tbody>
</table>

@code {
    private List<ApplicationUser> Users = new();
    private UserManager<ApplicationUser> Manager;
    private Dictionary<string, IList<string>> UserRoles = new();

    protected override async Task OnInitializedAsync()
    {
        Manager = UserService.GetManager();
        //Users = await GetAllUsersAsync(); // Загружаем пользователей при инициализации
        Users = await Manager.Users.ToListAsync();

        foreach (var user in Users)
        {
            var roles = await Manager.GetRolesAsync(user);
            UserRoles[user.Id] = roles;
        }
    }
    private void AddUser()
    {
        Navigation.NavigateTo("/admin/users/new");
    }
    private void EditUser(string id)
    {
        Navigation.NavigateTo($"/admin/users/edit/{id}");
    }

    private async Task DeleteUserAsync(ApplicationUser user)
    {

        await Manager.DeleteAsync(user);
        Users = await Manager.Users.ToListAsync();
    }
}
