@using VitzShop.Services
@using VitzShop.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;

@attribute [Authorize(Roles = "Admin")]
@page "/admin/users/new"
@inject UserService UserService
@inject RoleManager<IdentityRole> RoleService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1 class="mb-4"><i class="bi bi-plus-circle"></i> Добавление нового пользователя</h1>

<EditForm Model="@User" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <!-- Основная информация -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">Основная информация</div>
        <div class="card-body row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Пароль</label>
                <InputText class="form-control" @bind-Value="Password" />
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Почта</label>
                <InputText class="form-control" @bind-Value="Email" />
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Роль</label>
                <select class="form-select" @bind="SelectedRole">
                    <option value="">Выберите роль</option>
                    @foreach (var role in Roles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>

        </div>
    </div>
    <!-- Кнопки -->
    <div class="d-flex justify-content-between">
        <button type="reset" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-counterclockwise"></i> Очистить
        </button>
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-save"></i> Сохранить
        </button>
    </div>
</EditForm>

@code {
    private List<string?> Roles { get; set; } = new();
    private string? Email { get; set; }
    private string? SelectedRole { get; set; }
    private string? Password { get; set; }
    private ApplicationUser User = new();
    private UserManager<ApplicationUser> Manager;

    protected override async Task OnInitializedAsync()
    {
        Manager = UserService.GetManager();
        Roles = (await RoleService.Roles.ToListAsync()).Select(r => r.Name).ToList();
    }
    async Task HandleValidSubmit()
    {
        var user = await Manager.FindByEmailAsync(Email);
        if (user == null)
        {
            User.Email = Email;
            User.UserName = Email;
            User.EmailConfirmed = true;

            var result = await Manager.CreateAsync(User, Password);
            if (result.Succeeded && !string.IsNullOrEmpty(SelectedRole))
            {
                await Manager.AddToRoleAsync(User, SelectedRole);
                await Manager.UpdateAsync(User);
                Console.WriteLine($" {SelectedRole} успешно создан");
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    Console.WriteLine($" Ошибка создания: {error.Description}");
                }
            }
            Navigation.NavigateTo("/admin/users");
        }
    }
}

