@using VitzShop.Services
@using VitzShop.Data.Models

@page "/productcatalog"
@inject ProductService ProductService
@rendermode InteractiveServer

<h3 class="mb-4">Каталог товаров</h3>

<!-- Категории -->
<div class="mb-3 d-flex gap-3 flex-wrap">
    @if (categories == null)
    {
        <p>Загрузка категорий...</p>
    }
    else if (!categories.Any())
    {
        <p>Нет категорий.</p>
    }
    else
    {
        <div class="mb-3 d-flex gap-3 flex-wrap">
            @foreach (var category in categories)
            {
                <button @onclick="() => FilterByCategoryAsync(category.Id)" class="btn @(selectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary")">
                    @category.Name
                </button>

            }
        </div>
    }
</div>

<!-- Товары -->
@if (products == null)
{
    <p>Загрузка товаров...</p>
}
else if (!products.Any())
{
    <p>Нет товаров в выбранной категории.</p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="@product.ImageUrl" class="card-img-top" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@($"{product.Price:C}")</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Category> categories = new();
    private List<Product> products = new();
    private int selectedCategoryId;

    // Загружаем категории и товары по умолчанию
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Инициализация категорий...");
        categories = await ProductService.GetAllCategoriesAsync();

        if (categories == null || !categories.Any())
        {
            Console.WriteLine("Нет категорий.");
        }
        else
        {
            Console.WriteLine($"Инициализировано {categories.Count} категорий.");
            selectedCategoryId = categories.First().Id;
            Console.WriteLine($"Выбрана категория: {selectedCategoryId}");
            
            products = await ProductService.GetProductsByCategoryIdAsync(selectedCategoryId);
            Console.WriteLine($"Загружено {products?.Count ?? 0} товаров для категории {selectedCategoryId}.");

        }

    }

    // Фильтрация товаров по категории
    private async Task FilterByCategoryAsync(int categoryId)
    {
        Console.WriteLine($"Фильтрация товаров по категории {categoryId}...");
        selectedCategoryId = categoryId;

        // Загружаем товары для выбранной категории
        products = await ProductService.GetProductsByCategoryIdAsync(categoryId);
        Console.WriteLine($"Загружено {products?.Count ?? 0} товаров для категории {categoryId}.");

        // Обновляем UI вручную
        StateHasChanged();
    }

}
