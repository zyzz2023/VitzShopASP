@using VitzShop.Services
@using VitzShop.Data.Models
@using Microsoft.AspNetCore.Components

@page "/productcatalog"
@page "/productcatalog/{gender}"
@inject ProductService ProductService
@inject CategoriesService CategoriesService
@inject NavigationManager Navigation
@rendermode InteractiveServer



<div class="mb-2">
    @if (!string.IsNullOrWhiteSpace(gender))
    {
        <span class="gender-text">@gender</span>
    } else
    {
        <span class="gender-text">Общий каталог</span>
    }
</div>
<!-- Категории -->
<div class="mb-4">
    @if (categories == null)
    {
        <p>Загрузка категорий...</p>
    }
    else if (!categories.Any())
    {
        <p>Нет категорий.</p>
    }
    else
    {
        <div class="row g-2">
            @foreach (var category in categories)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <button @onclick="() => FilterByCategoryAsync(category.Id)"
                            class="btn @(selectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary") w-100">
                        @category.Name
                    </button>
                </div>
            }
        </div>
    }
</div>

<!-- Товары -->
@if (products == null)
{
    <p>Загрузка товаров...</p>
}
else if (!products.Any())
{
    <p>Нет товаров в выбранной категории.</p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                <a href="@($"/productcard/{product.Id}")" style="text-decoration: none; color: inherit;">
                    <div class="card product-card h-100">
                        <div class="image-wrapper">
                            <img src="@product.ImageUrl" alt="@product.Name" class="card-img-top" />
                        </div>
                        <div class="card-body p-2">
                            <h6 class="card-title mb-1 text-truncate">@product.Name</h6>
                            <p class="card-text small text-muted mb-0">@($"{product.Price:C}")</p>
                        </div>
                    </div>
                </a>
            </div>


        }
    </div>
}

@code {
    [Parameter]
    public string? gender { get; set; }

    private List<Category> categories = new();
    private List<Product> products = new();
    private int selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Инициализация категорий...");
        categories = await CategoriesService.GetAllCategoriesAsync();

        if (categories == null || !categories.Any())
        {
            Console.WriteLine("Нет категорий.");
            return;
        }

        // Если передан параметр gender
        if (!string.IsNullOrWhiteSpace(gender))
        {
            var genderLower = gender.ToLower();

            // Найти первую категорию, у которой есть товары соответствующего гендера
            foreach (var category in categories)
            {
                var productsInCategory = await ProductService.GetProductsByCategoryAndGenderAsync(category.Id, genderLower);
                if (productsInCategory.Any())
                {
                    selectedCategoryId = category.Id;
                    products = productsInCategory;
                    return;
                }
            }

            // Если ни одна категория не содержит товары указанного пола
            Console.WriteLine($"Нет товаров с гендером '{gender}' в доступных категориях.");
            selectedCategoryId = categories.First().Id;
            products = await ProductService.GetProductsByCategoryIdAsync(selectedCategoryId);
            return;
        }


        // Если gender не указан — загрузить первую категорию как есть
        selectedCategoryId = categories.First().Id;
        products = await ProductService.GetProductsByCategoryIdAsync(selectedCategoryId);
    }


    private async Task FilterByCategoryAsync(int categoryId)
    {
        selectedCategoryId = categoryId;

        // Фильтрация по гендеру, если параметр гендера существует
        if (!string.IsNullOrWhiteSpace(gender))
        {
            products = await ProductService.GetProductsByCategoryAndGenderAsync(categoryId, gender);
        }
        else
        {
            products = await ProductService.GetProductsByCategoryIdAsync(categoryId);
        }

        StateHasChanged();  // Обновление UI
    }
}
