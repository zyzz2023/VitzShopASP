@using Microsoft.AspNetCore.Identity
@using VitzShop.Core.Entities
@using VitzShop.Infrastructure.Services
@attribute [Authorize(Roles = "Admin")]
@page "/admin/users/new"
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1 class="mb-4"><i class="bi bi-plus-circle"></i> Добавление нового пользователя</h1>

<EditForm Model="@UserModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">Основная информация</div>
        <div class="card-body row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Почта*</label>
                <InputText class="form-control" @bind-Value="UserModel.Email" />
                <ValidationMessage For="@(() => UserModel.Email)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Пароль* (мин. 8 символов)</label>
                <InputText type="password" class="form-control" @bind-Value="UserModel.Password" />
                <ValidationMessage For="@(() => UserModel.Password)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Роль*</label>
                <select class="form-select" @bind="UserModel.SelectedRole" required>
                    <option value="">Выберите роль</option>
                    @foreach (var role in AvailableRoles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <div class="d-flex justify-content-between">
        <button type="reset" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-counterclockwise"></i> Очистить
        </button>
        <button type="submit" class="btn btn-primary" disabled="@IsProcessing">
            <i class="bi bi-save"></i> @(IsProcessing ? "Сохранение..." : "Сохранить")
        </button>
    </div>
</EditForm>

@code {
    private UserCreateModel UserModel { get; set; } = new();
    private List<string> AvailableRoles { get; set; } = new();
    private string ErrorMessage { get; set; }
    private bool IsProcessing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AvailableRoles = (await RoleManager.Roles.ToListAsync())
                .Select(r => r.Name)
                .Where(r => r != null)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ErrorMessage = "Не удалось загрузить список ролей";
        }
    }

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        ErrorMessage = null;

        try
        {
            // Проверка существования пользователя
            var existingUser = await UserManager.FindByEmailAsync(UserModel.Email);
            if (existingUser != null)
            {
                ErrorMessage = "Пользователь с такой почтой уже существует";
                return;
            }

            var user = new ApplicationUser
                {
                    UserName = UserModel.Email,
                    Email = UserModel.Email,
                    EmailConfirmed = true,
                    TwoFactorEnabled = true
                };

            
            var result = await UserManager.CreateAsync(user, UserModel.Password);

            if (result.Succeeded)
            {
                if (!string.IsNullOrEmpty(UserModel.SelectedRole))
                {
                    var roleResult = await UserManager.AddToRoleAsync(user, UserModel.SelectedRole);
                    if (!roleResult.Succeeded)
                    {
                        ErrorMessage = "Ошибка назначения роли: " +
                            string.Join(", ", roleResult.Errors.Select(e => e.Description));
                        return;
                    }
                }

                var authenticatorKey = await UserManager.GenerateTwoFactorTokenAsync(user, "Authenticator");
                await UserManager.ResetAuthenticatorKeyAsync(user);

                var recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 5);
                Navigation.NavigateTo("/admin/users", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Ошибка создания пользователя: " +
                    string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ErrorMessage = "Произошла непредвиденная ошибка";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    public class UserCreateModel
    {
        public string Email { get; set; }

        public string Password { get; set; }

        public string SelectedRole { get; set; }

    }
}